import type { Character, Puzzle, Concept } from './types';

// FIX: Add GAME_CONSTANTS and CONCEPTS exports, which were missing and causing errors in other components.
export const GAME_CONSTANTS = {
  PLAYER_MAX_HEALTH: 100,
  OPPONENT_MAX_HEALTH: 100,
  BASE_ATTACK_DAMAGE: 15,
  POWER_ATTACK_BONUS: 10,
  FAIL_DAMAGE: {
    EASY: 5,
    MEDIUM: 10,
    HARD: 15,
  },
  OPPONENT_ATTACK_DAMAGE: {
    EASY: 8,
    MEDIUM: 10,
    HARD: 13,
  },
  OPPONENT_TURN_DELAY_MS: 3000, // Increased for banter
  PUZZLE_TIMER_SECONDS: {
    EASY: 90,
    MEDIUM: 60,
    HARD: 45,
  },
};

export const BUGGY_MESSAGES: string[] = [
    "Error: Too many GOTO statements. Please refactor your life.",
    "Exception: CaffeineNotFound.",
    "418: I'm a teapot.",
    "Segmentation Fault (core dumped). Your attack is now a core memory.",
    "Error: Success is not a function.",
    "Stack Overflow. Please ask for help on Stack Overflow.",
    "Undefined is not a weapon.",
    "Kernel Panic: Your opponent is too cool.",
    "TILT: Does not compute.",
    "Error 503: Syntax unavailable.",
    "Feature, not a bug.",
    "NullPointerException: Aim cannot be null.",
];

export const CONCEPTS: Concept[] = [
    {
        name: "Coding Fundamentals",
        description: "Learn the absolute basics of programming from variables to functions.",
        tags: ['fundamentals'],
        lesson: `
            <p>Welcome to the world of coding! Fundamentals are the building blocks of every program you'll ever write.</p>
            <ul class="list-disc list-inside space-y-2 mt-2">
                <li><strong>Variables:</strong> Think of them as labeled boxes where you can store information (like numbers, text, or true/false values).</li>
                <li><strong>Data Types:</strong> This is the type of information, like a <code>string</code> for text, <code>number</code> for math, or <code>boolean</code> for true/false.</li>
                <li><strong>Operators:</strong> These are symbols that perform actions, like <code>+</code> for addition or <code>===</code> for checking if two things are exactly equal.</li>
                <li><strong>Functions:</strong> Reusable blocks of code that perform a specific task. They help keep your code organized!</li>
            </ul>
            <p class="mt-2">Master these, and you're well on your way to becoming a coding champion.</p>
        `
    },
    {
        name: "Loops",
        description: "Master the art of repetition with for and while loops.",
        tags: ['loop'],
        lesson: `
            <p>Don't repeat yourself! Loops are a fundamental concept that allows you to run the same block of code over and over again.</p>
            <ul class="list-disc list-inside space-y-2 mt-2">
                <li><strong>For Loop:</strong> The classic loop. You define a counter, a condition to check, and a way to change the counter. It's great when you know exactly how many times you need to repeat.</li>
                <li><strong>While Loop:</strong> This loop keeps going as long as its condition is true. Be careful, if the condition never becomes false, you'll have an infinite loop!</li>
                <li><strong>For...of Loop:</strong> A modern and clean way to iterate over items in a list (like an Array).</li>
            </ul>
            <p class="mt-2">Loops are the powerhouse of automation in programming.</p>
        `
    },
    {
        name: "Arrays",
        description: "Organize data into powerful, ordered lists.",
        tags: ['array'],
        lesson: `
            <p>An array is a special variable, which can hold more than one value at a time. It's an ordered list of items.</p>
            <ul class="list-disc list-inside space-y-2 mt-2">
                <li><strong>Indexes:</strong> Each item in an array has a numbered position, called an index. The first item is at index 0!</li>
                <li><strong>Length:</strong> You can always check how many items are in an array using its <code>.length</code> property.</li>
                <li><strong>Methods:</strong> Arrays come with powerful built-in functions (called methods) like <code>.push()</code> to add items to the end, and <code>.pop()</code> to remove the last item.</li>
            </ul>
            <p class="mt-2">Arrays are essential for managing collections of data, from a list of players to the minions of the Array Queen!</p>
        `
    },
    {
        name: "Debugging",
        description: "Find and squash those pesky bugs like a pro.",
        tags: ['debug'],
        lesson: `
            <p>Every programmer, from beginner to expert, creates bugs. Debugging is the essential skill of finding and fixing them.</p>
            <ul class="list-disc list-inside space-y-2 mt-2">
                <li><strong>Syntax Errors:</strong> These are like typos or grammar mistakes that stop the program from running at all. The computer will usually tell you where it got confused.</li>
                <li><strong>Logic Errors:</strong> The code runs, but it doesn't do what you expected. These can be tricky! You have to think like the computer and trace what your code is actually doing.</li>
                <li><strong>Common Bugs:</strong> Watch out for "off-by-one" errors in loops, using assignment (<code>=</code>) instead of comparison (<code>===</code>), and case sensitivity issues!</li>
            </ul>
            <p class="mt-2">A good debugger is patient and methodical. You'll become one with practice!</p>
        `
    }
];

export const CHARACTERS: Character[] = [
  {
    id: 1,
    name: "Loop Lord",
    description: "Overconfident brawler who overwhelms opponents with repeating strikes.",
    powerType: "Loop Attacks",
    color: "fuchsia",
  },
  {
    id: 2,
    name: "Debugger",
    description: "Calm and analytical, finds flaws in the enemy's code to counter.",
    powerType: "Error Cancels",
    color: "cyan",
  },
  {
    id: 3,
    name: "Array Queen",
    description: "Fierce and commanding, summons data minions to swarm her foes.",
    powerType: "Multi-minion Attacks",
    color: "emerald",
  },
  {
    id: 4,
    name: "Syntax Samurai",
    description: "A disciplined warrior whose attacks are as swift and precise as perfect code.",
    powerType: "Fast Slash Combos",
    color: "red",
  },
];

export const PUZZLES: Puzzle[] = [
    // --- Coding Fundamentals Puzzles ---
    { id: 1, level: 1, concept: "Print Statements", problem: "Display the message 'Hello World' in the console.", question: `console.log("{INPUT}");`, answer: "Hello World", tags: ['fundamentals'], explanation: "The console.log() function is used to print messages. Text, also called strings, must be wrapped in quotes." },
    { id: 2, level: 1, concept: "Variables", problem: "Create a variable named 'power' and assign it the numeric value 9001.", question: `let power = {INPUT};`, answer: "9001", tags: ['fundamentals'], explanation: "A variable is a container for a value. Here, 'power' is assigned the number 9001." },
    { id: 4, level: 2, concept: "Strings", problem: `Combine the string "Code " with another string to create "Code Clash".`, question: `const msg = "Code " + "{INPUT}";`, answer: `"Clash"`, tags: ['fundamentals'], explanation: "The '+' operator can be used to join (concatenate) strings together to form a new string. Remember to include quotes for a string value." },
    { id: 5, level: 3, concept: "Conditions", problem: `If the 'health' variable is less than 10, set the 'action' variable to the string "heal".`, question: `if (health < 10) { action = "{INPUT}"; }`, answer: `"heal"`, tags: ['fundamentals'], explanation: "An 'if' statement runs code only if its condition is true. If health is below 10, the action is to 'heal'." },
    { id: 6, level: 3, concept: "Functions", problem: "Define a function called 'blast' that returns the boolean value indicating success.", question: `function blast() { return {INPUT}; }`, answer: "true", tags: ['fundamentals'], explanation: "A function is a reusable block of code. The 'return' keyword specifies the value the function should output. 'true' is a boolean value." },
    { id: 9, level: 2, concept: "Operators", problem: "Complete the expression so that 'isReady' is true if either side of the operator is true.", question: `const isReady = true {INPUT} false; // Should be true`, answer: "||", tags: ['fundamentals'], explanation: "The logical OR (||) operator returns true if at least one of the operands is true." },
    { id: 15, level: 4, concept: "String to Number", problem: "The string '100' needs to be converted into a number and stored in the 'score' variable.", question: `const score = {INPUT}("100");`, answer: "parseInt", tags: ['fundamentals'], explanation: "The parseInt() function parses a string argument and returns an integer. This is needed to perform math on numbers stored as text." },
    { id: 20, level: 1, concept: "Operators", problem: "Complete the addition to make the variable 'c' equal 3.", question: `let a = 1; let b = 2; const c = a {INPUT} b;`, answer: "+", tags: ['fundamentals'], explanation: "The '+' operator is used for addition." },
    { id: 21, level: 2, concept: "String Properties", problem: "Get the length of the 'message' string.", question: `const message = "Hello"; let count = {INPUT};`, answer: "message.length", tags: ['fundamentals'], explanation: "The '.length' property of a string gives you the number of characters it contains." },
    { id: 22, level: 1, concept: "Comments", problem: "Make the second line a comment so that it is ignored.", question: `const x = 5; {INPUT} const y = 10;`, answer: "//", tags: ['fundamentals'], explanation: "Using a double slash // turns the rest of the line into a comment, which is ignored by the code interpreter." },
    { id: 23, level: 1, concept: "Booleans", problem: "Assign the boolean value for 'true' to the 'isReady' variable.", question: `let isReady = {INPUT};`, answer: "true", tags: ['fundamentals'], explanation: "Booleans are a data type that can only be 'true' or 'false'." },
    { id: 24, level: 2, concept: "Console", problem: "Use the console to display the value of the 'planet' variable.", question: `const planet = "Earth"; console.{INPUT}(planet);`, answer: "log", tags: ['fundamentals'], explanation: "console.log() is a common way to inspect values and debug code." },
    { id: 25, level: 2, concept: "Operators", problem: "Complete the division to make the quotient equal 5.", question: `const quotient = 10 / {INPUT};`, answer: "2", tags: ['fundamentals'], explanation: "The '/' operator is used for division." },
    { id: 26, level: 3, concept: "Operators", problem: "Find the remainder of 10 divided by 3.", question: `const remainder = 10 % {INPUT};`, answer: "3", tags: ['fundamentals'], explanation: "The modulo operator (%) gives the remainder of a division." },
    { id: 27, level: 3, concept: "Operators", problem: "Increment the value of x by 1.", question: `let x = 5; x{INPUT};`, answer: "++", tags: ['fundamentals'], explanation: "The increment operator (++) adds one to its operand." },
    { id: 28, level: 3, concept: "Conditions", problem: "Provide the keyword for what to do if an 'if' statement is false.", question: `if (score > 100) { status = "Expert"; } {INPUT} { status = "Novice"; }`, answer: "else", tags: ['fundamentals'], explanation: "The 'else' statement specifies a block of code to be executed if the condition in the 'if' statement is false." },
    { id: 29, level: 2, concept: "Strings", problem: "Concatenate the strings to form 'Hi Bob', with a space in the middle.", question: `const greeting = 'Hi'; const person = 'Bob'; const message = greeting + '{INPUT}' + person;`, answer: `" "`, tags: ['fundamentals'], explanation: "To add a space between variables when joining strings, you must explicitly add a space string ' '." },
    { id: 58, level: 2, concept: "Objects", problem: "Access the 'name' property of the 'player' object.", question: `const player = {name: 'Zelda', health: 100}; const playerName = player.{INPUT};`, answer: `name`, tags: ['fundamentals'], explanation: "Use dot notation to access properties of an object." },
    { id: 59, level: 3, concept: "Function Parameters", problem: "Create a function 'greet' that takes a 'name' parameter.", question: `function greet({INPUT}) { return "Hi " + name; }`, answer: `name`, tags: ['fundamentals'], explanation: "Parameters are variables listed in a function's definition that act as placeholders for values you'll pass in." },
    { id: 60, level: 3, concept: "Strict Equality", problem: "Compare if 7 (number) and '7' (string) are NOT strictly equal.", question: `const areTheySame = 7 {INPUT} '7'; // Should be false`, answer: `===`, tags: ['fundamentals'], explanation: "The strict equality operator (===) checks for both value and type equality without type coercion." },
    { id: 61, level: 4, concept: "String Methods", problem: "Convert the 'message' to all uppercase letters.", question: `const message = 'attack'; const upper = message.{INPUT}();`, answer: `toUpperCase`, tags: ['fundamentals'], explanation: "The .toUpperCase() method returns the calling string value converted to uppercase." },
    { id: 62, level: 2, concept: "Variable Declaration", problem: "Declare a variable 'score' that cannot be reassigned.", question: `{INPUT} score = 100;`, answer: `const`, tags: ['fundamentals'], explanation: "'const' declares a block-scoped variable whose value cannot be changed through reassignment." },
    { id: 71, level: 1, concept: "Data Types", problem: "Complete the code to assign the boolean value `false` to the variable `isActive`.", question: `let isActive = {INPUT};`, answer: "false", tags: ['fundamentals'], explanation: "The boolean data type has two possible values: `true` and `false`." },
    { id: 72, level: 2, concept: "Template Literals", problem: "Use a template literal to create the string 'Level: 5'.", question: `const level = 5; const text = \`Level: \${{INPUT}}\`;`, answer: "level", tags: ['fundamentals'], explanation: "Template literals use back-ticks (``) and allow embedded expressions like variables with ${...}." },
    { id: 73, level: 2, concept: "Object Access", problem: "Access the 'power' property of the 'character' object.", question: `const character = { power: 100 }; const p = character.{INPUT};`, answer: "power", tags: ['fundamentals'], explanation: "Use dot notation (.) to access properties of an object." },
    { id: 74, level: 3, concept: "Ternary Operator", problem: "If 'score' is over 100, assign 'Win', otherwise 'Lose'.", question: `const result = score > 100 ? 'Win' : {INPUT};`, answer: "'Lose'", tags: ['fundamentals'], explanation: "The ternary operator is a concise way to write an if-else statement. The format is condition ? valueIfTrue : valueIfFalse." },
    { id: 75, level: 3, concept: "Function Arguments", problem: "Call the 'attack' function, passing the 'enemy' variable as an argument.", question: `attack({INPUT});`, answer: "enemy", tags: ['fundamentals'], explanation: "Arguments are the actual values passed to a function when it is invoked." },
    { id: 76, level: 1, concept: "Undefined", problem: "Check if the variable `x`, which has been declared but not assigned, is equal to `undefined`.", question: `let x; if (x === {INPUT}) {}`, answer: "undefined", tags: ['fundamentals'], explanation: "`undefined` is a primitive value automatically assigned to variables that have just been declared but not initialized." },
    { id: 77, level: 2, concept: "Null", problem: "Assign the special value 'null' to a variable to signify 'no value'.", question: `let data = {INPUT};`, answer: "null", tags: ['fundamentals'], explanation: "Null represents the intentional absence of any object value." },
    { id: 78, level: 4, concept: "Arrow Functions", problem: "Define a simple arrow function that returns the number 10.", question: `const getValue = () => {INPUT};`, answer: "10", tags: ['fundamentals'], explanation: "Arrow functions provide a shorter syntax for writing functions." },
    { id: 79, level: 3, concept: "Comparison", problem: "Check if 'a' is NOT equal to 'b'.", question: `if (a {INPUT} b) {}`, answer: "!=", tags: ['fundamentals'], explanation: "The inequality operator (!=) checks if two values are not equal." },
    { id: 80, level: 4, concept: "Strict Inequality", problem: "Check if 'x' is not strictly equal to 'y' (different value or type).", question: `const notSame = x {INPUT} y;`, answer: "!==", tags: ['fundamentals'], explanation: "The strict inequality operator (!==) returns true if the operands are not equal and/or not of the same type." },
    { id: 81, level: 2, concept: "Variable Reassignment", problem: "Change the value of the 'score' variable to 50.", question: `let score = 0; score = {INPUT};`, answer: "50", tags: ['fundamentals'], explanation: "Variables declared with 'let' can be reassigned to a new value." },
    { id: 82, level: 3, concept: "String Method: trim", problem: "Remove whitespace from both ends of the string.", question: `const input = "  data  "; const clean = input.{INPUT}();`, answer: "trim", tags: ['fundamentals'], explanation: "The .trim() method removes whitespace from both ends of a string." },
    { id: 83, level: 4, concept: "Math Object", problem: "Get a random number between 0 and 1 using the Math object.", question: `const rand = Math.{INPUT}();`, answer: "random", tags: ['fundamentals'], explanation: "Math.random() returns a floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive)." },
    { id: 84, level: 4, concept: "Math Object", problem: "Round the number 2.7 down to the nearest integer.", question: `const rounded = Math.{INPUT}(2.7);`, answer: "floor", tags: ['fundamentals'], explanation: "Math.floor() rounds a number down to the nearest whole number." },
    { id: 85, level: 2, concept: "Logical AND", problem: "Use the logical AND operator to check if two conditions are both true.", question: `if (isReady {INPUT} hasMana) {}`, answer: "&&", tags: ['fundamentals'], explanation: "The logical AND (&&) operator returns true only if both of its operands are true." },
    { id: 86, level: 5, concept: "Short-circuiting", problem: "If 'user' exists, get its name. This prevents an error if 'user' is null.", question: `const name = user {INPUT} user.name;`, answer: "&&", tags: ['fundamentals'], explanation: "Logical operators use short-circuiting. If the first part of an AND (&&) is false, the second part is never evaluated." },
    { id: 87, level: 1, concept: "Variable Naming", problem: "Choose a valid variable name. Variable names cannot start with a number.", question: `let {INPUT} = 'Gold';`, answer: "firstPlace", tags: ['fundamentals'], explanation: "Variable names must start with a letter, underscore (_), or dollar sign ($). `firstPlace` is a common convention." },
    { id: 88, level: 3, concept: "Object Methods", problem: "Call the 'activate' method on the 'shield' object.", question: `const shield = { activate: () => {} }; shield.{INPUT}();`, answer: "activate", tags: ['fundamentals'], explanation: "A function that is a property of an object is called a method." },
    { id: 89, level: 4, concept: "Number to String", problem: "Convert the number 42 into a string.", question: `const num = 42; const str = num.toString({INPUT});`, answer: "()", tags: ['fundamentals'], explanation: "The .toString() method converts a number to its string representation." },
    { id: 90, level: 5, concept: "Default Parameters", problem: "Set a default value of 1 for the 'level' parameter.", question: `function createPlayer(name, level = {INPUT}) {}`, answer: "1", tags: ['fundamentals'], explanation: "Default function parameters allow named parameters to be initialized with default values if no value is passed." },
    { id: 91, level: 2, concept: "Exponentiation", problem: "Calculate 2 to the power of 3.", question: `const result = 2 {INPUT} 3;`, answer: "**", tags: ['fundamentals'], explanation: "The exponentiation operator (**) raises the first operand to the power of the second operand." },
    { id: 92, level: 3, concept: "String Method: includes", problem: "Check if the 'message' string contains the word 'error'.", question: `const hasError = message.{INPUT}('error');`, answer: "includes", tags: ['fundamentals'], explanation: "The .includes() method determines whether one string may be found within another string, returning true or false." },
    { id: 93, level: 4, concept: "String Method: slice", problem: "Get a substring of the first 3 characters from 'text'.", question: `const text = 'abcdef'; const sub = text.slice(0, {INPUT});`, answer: "3", tags: ['fundamentals'], explanation: ".slice(startIndex, endIndex) extracts a section of a string. The endIndex is not included." },
    { id: 94, level: 3, concept: "Boolean Conversion", problem: "Complete the `if` statement. A non-empty string is 'truthy' and will act like `true`.", question: `const message = 'hi'; if ({INPUT}) { /* this code runs */ }`, answer: "message", tags: ['fundamentals'], explanation: "Values that are not `false`, 0, `null`, `undefined`, `NaN`, or an empty string are 'truthy' and will pass a conditional check." },
    { id: 95, level: 3, concept: "Boolean Conversion", problem: "The `if` condition will fail because 0 is 'falsy'. Assign 'Waiting' to the status.", question: `let status = 'Ready'; if (0) { status = 'Go'; } else { status = {INPUT}; }`, answer: "'Waiting'", tags: ['fundamentals'], explanation: "The number 0 is 'falsy', so the `else` block will be executed." },
    { id: 96, level: 4, concept: "Object Destructuring", problem: "Extract the 'name' property from the 'hero' object into a variable.", question: `const { {INPUT} } = { name: 'Link', age: 18 };`, answer: "name", tags: ['fundamentals'], explanation: "Object destructuring provides an easy way to extract properties from objects into variables." },
    { id: 97, level: 5, concept: "Spread Syntax", problem: "Use the spread syntax to merge two objects into a new one.", question: `const obj2 = { ...obj1, power: 99 };`, answer: "...", tags: ['fundamentals'], explanation: "The spread (...) syntax allows an iterable, such as an object, to be expanded in place." },
    { id: 98, level: 2, concept: "Assignment Operators", problem: "Use a shorthand operator to add 5 to the 'score' variable.", question: `score {INPUT} 5;`, answer: "+=", tags: ['fundamentals'], explanation: "The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable." },
    { id: 99, level: 3, concept: "String Access", problem: "Get the first character ('H') of the string 'Hello'.", question: `const firstChar = 'Hello'[{INPUT}];`, answer: "0", tags: ['fundamentals'], explanation: "Strings can be treated like arrays to access individual characters using bracket notation." },
    { id: 100, level: 4, concept: "Optional Chaining", problem: "Safely access a nested property that might not exist.", question: `const street = user{INPUT}.address?.street;`, answer: "?", tags: ['fundamentals'], explanation: "Optional chaining (?.) stops the evaluation if the value before it is undefined or null, preventing errors." },

    // --- Loop Lord Puzzles ---
    { id: 3, level: 2, concept: "For Loops", problem: "Create a 'for' loop that runs exactly 5 times.", question: `for(let i=0; i < {INPUT}; i++)`, answer: "5", tags: ['loop'], explanation: "A 'for' loop repeats code. This loop runs as long as 'i' is less than 5 (for i = 0, 1, 2, 3, 4)." },
    { id: 10, level: 3, concept: "While Loops", problem: "Use a 'while' loop to count down from 5 until the condition is no longer met.", question: `let i = 5; while (i > {INPUT}) { i--; }`, answer: "0", tags: ['loop'], explanation: "A 'while' loop continues as long as its condition is true. The loop stops when 'i' is no longer greater than 0." },
    { id: 11, level: 4, concept: "For...of Loops", problem: "Write a 'for...of' loop to iterate over an array called 'items'.", question: `for (const item of {INPUT}) { }`, answer: "items", tags: ['loop'], explanation: "The 'for...of' loop iterates over iterable objects like arrays, executing code for each element." },
    { id: 12, level: 2, concept: "Loop Control", problem: "Inside a loop, if the counter 'i' is exactly 3, skip the rest of the code in that iteration.", question: `if (i === 3) { {INPUT}; }`, answer: "continue", tags: ['loop'], explanation: "The 'continue' statement skips the current iteration of a loop and proceeds to the next one." },
    { id: 30, level: 1, concept: "For Loops", problem: "Inside this loop, log the current value of the counter 'i'.", question: `for (let i = 1; i <= 3; i++) { console.log({INPUT}); }`, answer: "i", tags: ['loop'], explanation: "The variable declared in the loop initializer (here, 'i') is available inside the loop's body." },
    { id: 31, level: 2, concept: "While Loops", problem: "Increment the 'count' variable inside this 'while' loop to prevent it from running forever.", question: `let count = 0; while (count < 2) { count{INPUT}; }`, answer: "++", tags: ['loop'], explanation: "It's crucial to change the condition variable inside a while loop to eventually make the condition false and exit the loop." },
    { id: 32, level: 3, concept: "Loop Control", problem: "Use a keyword to stop and exit this loop completely when i is 5.", question: `for (let i = 0; i < 10; i++) { if (i === 5) { {INPUT}; } }`, answer: "break", tags: ['loop'], explanation: "The 'break' statement terminates the current loop and transfers control to the statement following the terminated statement." },
    { id: 33, level: 4, concept: "For...of Loops", problem: "Provide the keyword that separates the element variable from the array in a 'for...of' loop.", question: `const letters = ['a','b','c']; for (const letter {INPUT} letters) {}`, answer: "of", tags: ['loop'], explanation: "The 'of' keyword is used in 'for...of' loops to iterate over the values of an iterable object." },
    { id: 34, level: 2, concept: "For Loops", problem: "Create a 'for' loop that counts down by decrementing the counter.", question: `for (let i = 5; i > 0; i{INPUT}) {}`, answer: "--", tags: ['loop'], explanation: "The decrement operator (--) subtracts one from its operand, useful for counting backwards." },
    { id: 35, level: 3, concept: "Do...while Loops", problem: "Make this 'do...while' loop run 3 times.", question: `let text = ''; let i = 0; do { text += 'A'; i++; } while (i < {INPUT});`, answer: "3", tags: ['loop'], explanation: "A 'do...while' loop checks its condition at the end, so it always runs at least once." },
    { id: 36, level: 1, concept: "Loop Concepts", problem: "Sum all the numbers in the `data` array using a loop.", question: `let sum = 0; for(const n of data) { sum {INPUT} n; }`, answer: "+=", tags: ['loop'], explanation: "Inside the loop, you can add the current number `n` to the `sum` using the `+=` operator." },
    { id: 37, level: 4, concept: "For...of Loops", problem: "Inside this 'for...of' loop, add the current element's value to the 'sum'.", question: `let sum = 0; const nums = [10,20]; for (const num of nums) { sum += {INPUT}; }`, answer: "num", tags: ['loop'], explanation: "The variable declared in the 'for...of' loop (here, 'num') holds the value of the current element in the iteration." },
    { id: 63, level: 3, concept: "Do...while Loops", problem: "What keyword starts a loop that always executes at least once?", question: `{INPUT} { ... } while (condition);`, answer: `do`, tags: ['loop'], explanation: "A 'do...while' loop executes its body once before checking the condition." },
    { id: 64, level: 4, concept: "Iterating Strings", problem: "Loop over each character of the 'word' string.", question: `const word = 'code'; for (const char of {INPUT}) {}`, answer: `word`, tags: ['loop'], explanation: "You can use a 'for...of' loop to iterate directly over the characters of a string." },
    { id: 65, level: 4, concept: "For...in Loops", problem: "Use a 'for...in' loop to iterate over the properties of the 'stats' object.", question: `for (const key {INPUT} stats) {}`, answer: `in`, tags: ['loop'], explanation: "The 'for...in' loop iterates over the enumerable properties of an object." },
    { id: 101, level: 3, concept: "Nested Loops", problem: "Which variable represents the counter for the inner loop?", question: `for (let i=0; i<2; i++) { for (let j=0; j<2; j++) {} } // Inner loop counter is {INPUT}`, answer: "j", tags: ['loop'], explanation: "In nested loops, the second declared counter (j) belongs to the inner loop." },
    { id: 102, level: 4, concept: "Looping through a String", problem: "Iterate through each character of the 'word' string.", question: `for (const char of {INPUT}) { console.log(char); }`, answer: "word", tags: ['loop'], explanation: "A 'for...of' loop can directly iterate over the characters in a string." },
    { id: 103, level: 5, concept: "for...in loop", problem: "Get the property name (key) from the 'robot' object in this loop.", question: `for (const key {INPUT} robot) { console.log(key); }`, answer: "in", tags: ['loop'], explanation: "The 'for...in' loop iterates over the property names (keys) of an object." },
    { id: 104, level: 2, concept: "For Loops", problem: "Create a loop that prints numbers from 2 to 4.", question: `for (let i = 2; i <= {INPUT}; i++) {}`, answer: "4", tags: ['loop'], explanation: "The loop condition 'i <= 4' ensures the loop runs for i=2, i=3, and i=4." },
    { id: 105, level: 3, concept: "While Loops", problem: "Create a 'while' loop that stops when 'isActive' is false.", question: `while ({INPUT}) { /* ... */ }`, answer: "isActive", tags: ['loop'], explanation: "A while loop continues as long as its condition evaluates to true." },
    { id: 106, level: 4, concept: "Looping with steps", problem: "Create a 'for' loop that counts up by 2 (e.g., 0, 2, 4).", question: `for (let i = 0; i < 5; i {INPUT} 2) {}`, answer: "+=", tags: ['loop'], explanation: "You can use assignment operators like '+=' to control the step of each loop iteration." },
    { id: 107, level: 5, concept: "Nested Loop Break", problem: "Use a labeled `break` to exit the outer `gameLoop` from the inner loop.", question: `gameLoop: for(let i=0; i<2; i++) { for(let j=0; j<2; j++) { break {INPUT}; } }`, answer: "gameLoop", tags: ['loop'], explanation: "You can `break` to a label to exit nested loops or blocks." },
    { id: 108, level: 2, concept: "Loop Variable Scope", problem: "The variable 'i' declared with 'let' in a 'for' loop is only accessible ____ the loop.", question: `// It's accessible {INPUT} the loop.`, answer: "inside", tags: ['loop'], explanation: "Variables declared with 'let' in a loop's header are scoped to the loop's body." },
    { id: 109, level: 3, concept: "Do...while", problem: "What keyword starts a loop that is guaranteed to run at least once?", question: `{INPUT} { } while (condition);`, answer: "do", tags: ['loop'], explanation: "The 'do...while' loop checks its condition after the block has been executed." },
    { id: 110, level: 4, concept: "For...of with Arrays", problem: "Get the sum of all numbers in the 'prices' array.", question: `let total = 0; for (const price of prices) { total += {INPUT}; }`, answer: "price", tags: ['loop'], explanation: "The 'for...of' loop assigns the value of each array element to the loop variable ('price') in each iteration." },
    { id: 111, level: 1, concept: "Looping", problem: "Complete this `for` loop so that it runs exactly 10 times.", question: `for (let i = 0; i < {INPUT}; i++) {}`, answer: "10", tags: ['loop'], explanation: "The loop will run as long as `i` is less than 10, which means it will run for i = 0 through 9 (10 times)." },
    { id: 112, level: 3, concept: "Continue", problem: "In a loop, what keyword skips to the next iteration?", question: `if (i % 2 === 0) { {INPUT}; }`, answer: "continue", tags: ['loop'], explanation: "The 'continue' statement skips the rest of the current iteration and moves to the next one." },
    { id: 113, level: 2, concept: "Infinite Loop", problem: "This 'while' loop is missing a way to stop. How can 'i' be changed to fix it?", question: `let i = 0; while(i < 5) { /* needs i{INPUT}; */ }`, answer: "++", tags: ['loop'], explanation: "Forgetting to increment the counter in a while loop is a common cause of infinite loops." },
    { id: 114, level: 4, concept: "For...in with Objects", problem: "Access the value of a property inside a 'for...in' loop.", question: `for (const key in obj) { const value = obj[{INPUT}]; }`, answer: "key", tags: ['loop'], explanation: "Inside a 'for...in' loop, you use bracket notation with the key to get the corresponding value from the object." },
    { id: 115, level: 3, concept: "Loop Condition", problem: "This loop should run as long as 'i' is less than or equal to 10.", question: `for (let i = 0; i {INPUT} 10; i++) {}`, answer: "<=", tags: ['loop'], explanation: "The less than or equal to (<=) operator is used to include the final number in the loop's range." },
    { id: 116, level: 2, concept: "For Loop Parts", problem: "Complete the `for` loop's condition to make it stop when `i` is no longer less than 20.", question: `for (let i = 0; {INPUT}; i++) {}`, answer: "i < 20", tags: ['loop'], explanation: "The second part of a `for` loop is the condition, which is checked before each iteration. The loop continues as long as this condition is true." },
    { id: 117, level: 3, concept: "For Loop Parts", problem: "Initialize a counter variable `i` to 0 in the `for` loop statement.", question: `for ({INPUT}; i < 10; i++) {}`, answer: "let i = 0", tags: ['loop'], explanation: "The first part of a `for` loop is the initializer, which runs once at the beginning to set up the loop variable." },
    { id: 118, level: 4, concept: "While Loop with Flag", problem: "This loop uses a boolean 'flag' to control it. Set it to stop the loop.", question: `let found = false; while (!found) { if (item === target) { found = {INPUT}; } }`, answer: "true", tags: ['loop'], explanation: "Using a boolean 'flag' is a common pattern to control 'while' loops that need to stop when a condition is met inside." },
    { id: 119, level: 5, concept: "Array.forEach", problem: "Use the forEach method to execute a function for each array element.", question: `myArray.{INPUT}(item => console.log(item));`, answer: "forEach", tags: ['loop'], explanation: ".forEach() is an array method that provides a clean way to loop over array elements." },
    { id: 120, level: 2, concept: "Loop Counter", problem: "Use the loop counter `i` to access the element at the current position in the array.", question: `for(let i=0; i < arr.length; i++) { console.log(arr[{INPUT}]); }`, answer: "i", tags: ['loop'], explanation: "Inside a loop, the counter variable can be used as an index to access elements in an array." },
    { id: 121, level: 3, concept: "Looping an empty array", problem: "This `for` loop should not run at all. What value should `limit` have to prevent it from running?", question: `const limit = {INPUT}; for(let i=0; i<limit; i++) { /* do nothing */ }`, answer: "0", tags: ['loop'], explanation: "If the loop condition is false from the start (e.g., `i < 0` when `i` is 0), the loop's body will never execute." },
    { id: 122, level: 4, concept: "Do...while Use Case", problem: "Complete the `do...while` loop's condition so it stops when `i` is 5.", question: `let i = 0; do { i++; } while (i < {INPUT});`, answer: "5", tags: ['loop'], explanation: "A `do...while` loop executes its body first, then checks the condition. This loop will run for i=0, 1, 2, 3, 4." },
    { id: 123, level: 2, concept: "For Loop Syntax", problem: "Add the missing semicolon to separate the `for` loop's initializer and condition.", question: `for (let i = 0{INPUT} i < 5; i++) {}`, answer: ";", tags: ['loop'], explanation: "The three parts of a `for` loop statement (initializer, condition, and incrementor) must be separated by semicolons." },
    { id: 124, level: 4, concept: "Looping over arguments", problem: "Use a `for...of` loop to iterate over the `args` array.", question: `function logAll(...args) { for (const arg of {INPUT}) { console.log(arg); } }`, answer: "args", tags: ['loop'], explanation: "You can use a `for...of` loop to iterate over elements in an array, such as an array of function arguments." },
    { id: 125, level: 5, concept: "Array.map", problem: "Use the `.map()` method to create a new array where each number is doubled.", question: `const numbers = [1, 2, 3]; const doubled = numbers.{INPUT}(num => num * 2);`, answer: "map", tags: ['loop'], explanation: "The `.map()` method creates a new array by applying a function to every element of the original array." },
    { id: 126, level: 3, concept: "Looping and Scope", problem: "This code has a scope bug. Change `var` to a more modern keyword to fix it.", question: `for ({INPUT} i = 0; i < 3; i++) {} console.log(i); // Should be an error`, answer: "let", tags: ['loop'], explanation: "Using `let` instead of `var` scopes the loop counter variable `i` to the loop block, preventing it from 'leaking' into the outer scope." },
    { id: 127, level: 4, concept: "for...of with Sets", problem: "Iterate over the `unique` Set object using a `for...of` loop.", question: `const unique = new Set([1,2]); for (const item of {INPUT}) {}`, answer: "unique", tags: ['loop'], explanation: "`for...of` can be used to iterate over any iterable object, including Sets." },
    { id: 128, level: 5, concept: "Recursion", problem: "Complete the recursive call inside the `countDown` function.", question: `function countDown(n) { if (n > 0) { countDown(n - {INPUT}); } }`, answer: "1", tags: ['loop'], explanation: "Recursion is when a function calls itself. It's crucial to change the argument in the recursive call to eventually reach a base case and stop." },
    { id: 129, level: 3, concept: "While vs For", problem: "Use a `while` loop to run as long as the `isReady` variable is false.", question: `let isReady = false; while ({INPUT}) { /* wait... */ }`, answer: "!isReady", tags: ['loop'], explanation: "`while` loops are perfect for situations where the loop continues as long as a condition is true (or, in this case, `!isReady` is true)." },
    { id: 130, level: 2, concept: "Code Blocks", problem: "Add the missing curly braces to define the `for` loop's code block.", question: `for(let i=0; i<3; i++) {INPUT} console.log(i); {INPUT}`, answer: "{}", tags: ['loop'], explanation: "Curly braces `{}` are used to wrap the code block that should be executed on each loop iteration." },
    
    // --- Debugger Puzzles ---
    { id: 8, level: 4, concept: "Fixing Addition", problem: "Fix the following code so that the variable 'x' equals 15.", question: `let x = 10 {INPUT} 5; // Should be 15`, answer: "+", tags: ['debug'], explanation: "Debugging means finding and fixing errors. To get 15 from 10 and 5, you need the addition operator '+'." },
    { id: 13, level: 2, concept: "Case Sensitivity", problem: `A variable 'name' has been declared. Print its value to the console, paying attention to case sensitivity.`, question: `const name = "AI"; console.log({INPUT});`, answer: "name", tags: ['debug'], explanation: "JavaScript is case-sensitive. The variable 'name' must be referenced with the same casing it was declared with." },
    { id: 14, level: 3, concept: "Comparison", problem: "Check if the 'level' variable is exactly equal to 9. A single '=' is for assignment.", question: `if (level {INPUT} 9) { }`, answer: "===", tags: ['debug'], explanation: "The strict equality operator (===) checks if two values are equal without performing type conversion. A single '=' is for assignment." },
    { id: 50, level: 3, concept: "Assignment vs Comparison", problem: "This 'if' statement is assigning 5 to 'a' instead of checking for equality. Fix it.", question: `if (a {INPUT} 5) {}`, answer: "===", tags: ['debug'], explanation: "A common bug is using a single equals sign (assignment) instead of double or triple equals (comparison) in a condition." },
    { id: 51, level: 4, concept: "Type Coercion", problem: "The result is '255', not 30, due to string concatenation. Fix this by converting the string to a number first.", question: `const numStr = "25"; const num = {INPUT}(numStr) + 5;`, answer: "parseInt", tags: ['debug'], explanation: "When you add a number to a string, the number is converted to a string. Use parseInt() to treat the string as a number." },
    { id: 52, level: 2, concept: "Off-by-one Error", problem: "This loop runs 6 times (0 to 5). To make it run 5 times, change the condition.", question: `for (let i=0; i {INPUT} 5; i++) {}`, answer: "<", tags: ['debug'], explanation: "Off-by-one errors are common in loops. Using '<' instead of '<=' makes the loop run from 0 to 4, which is 5 times." },
    { id: 53, level: 2, concept: "Case Sensitivity", problem: "Accessing 'person.Name' will fail because property names are case-sensitive. Fix the code to access the 'name' property.", question: `const person = {name: 'Link'}; const myName = person.{INPUT};`, answer: "name", tags: ['debug'], explanation: "JavaScript is case-sensitive. 'Name' and 'name' are different. Property names must be accessed using the exact same case they were defined with." },
    { id: 54, level: 3, concept: "Unclosed String", problem: "This string is missing its closing quote, causing a syntax error. Fix it.", question: `const errorMsg = "{INPUT}An error occurred;`, answer: `"`, tags: ['debug'], explanation: "Strings must be enclosed in matching quotes (single, double, or backticks). A missing closing quote is a common syntax error." },
    { id: 55, level: 4, concept: "Function Call", problem: "The 'launch' function is not being called. Add parentheses to execute it.", question: `function launch() { return true; } const launched = launch{INPUT};`, answer: "()", tags: ['debug'], explanation: "To call or execute a function, you must follow its name with parentheses `()`." },
    { id: 56, level: 3, concept: "Array Index", problem: "Arrays are zero-indexed. To get the first item 'sword', you need to use index 0. Fix it.", question: `const items = ['sword', 'shield']; const first = items[{INPUT}];`, answer: "0", tags: ['debug'], explanation: "The first element of an array is at index 0, the second at index 1, and so on. Accessing an index that doesn't exist returns 'undefined'." },
    { id: 57, level: 1, concept: "Keywords", problem: "There is a typo in the 'function' keyword. Correct it.", question: `{INPUT} greet() {}`, answer: "function", tags: ['debug'], explanation: "Programming languages have reserved keywords with special meanings. Misspelling them, like 'functoin' instead of 'function', will cause a syntax error." },
    { id: 161, level: 2, concept: "Missing Brackets", problem: "This function is missing its closing curly bracket. Add it.", question: `function start() { console.log("Go!"); {INPUT}`, answer: "}", tags: ['debug'], explanation: "Code blocks for functions, loops, and conditionals must be enclosed in matching curly brackets {}." },
    { id: 162, level: 3, concept: "Incorrect Keyword", problem: "The keyword to declare a variable that can be changed is misspelled. Correct it.", question: `{INPUT} count = 0;`, answer: "let", tags: ['debug'], explanation: "A common typo is misspelling reserved keywords. 'let' is used for variables that can be reassigned." },
    { id: 163, level: 4, concept: "Scope Error", problem: "This code tries to use 'message' outside its scope. Declare it before the 'if' block to fix it.", question: `{INPUT} message; if(true){ message = "Hi"; }`, answer: "let", tags: ['debug'], explanation: "Variables declared with 'let' are block-scoped. To use a variable outside a block, declare it in the outer scope first." },
    { id: 164, level: 2, concept: "Unclosed String", problem: "The string literal is missing its opening quote. Add it.", question: `const message = {INPUT}Hello';`, answer: "'", tags: ['debug'], explanation: "Strings must be enclosed in a matching pair of single ('), double (\"), or backtick (`) quotes." },
    { id: 165, level: 3, concept: "Misspelled Method", problem: "The console logging method is misspelled. Correct it.", question: `console.{INPUT}('debug message');`, answer: "log", tags: ['debug'], explanation: "Typos in function or method names are a common source of errors. It's 'log', not 'logs'." },
    { id: 166, level: 4, concept: "Incorrect Comparison", problem: "This code should check if 'a' is greater than or equal to 'b'. Fix the operator.", question: `if (a {INPUT} b) {}`, answer: ">=", tags: ['debug'], explanation: "Using the wrong comparison operator leads to logic errors. '>=' means 'greater than or equal to'." },
    { id: 167, level: 1, concept: "Comment Syntax", problem: "This is not the correct syntax for a single-line comment. Fix it.", question: `{INPUT} This is a comment`, answer: "//", tags: ['debug'], explanation: "Single-line comments in JavaScript start with two forward slashes //." },
    { id: 168, level: 3, concept: "Missing Comma", problem: "Object properties must be separated by commas. Add the missing comma.", question: `const obj = { a: 1 {INPUT} b: 2 };`, answer: ",", tags: ['debug'], explanation: "In object and array literals, elements and properties must be separated by a comma." },
    { id: 169, level: 4, concept: "Function Return", problem: "This function should return the value of 'result', but the 'return' keyword is missing. Add it.", question: `function add(a, b) { const result = a + b; {INPUT} result; }`, answer: "return", tags: ['debug'], explanation: "If you want a function to output a value, you must use the 'return' keyword." },
    { id: 170, level: 5, concept: "Infinite Loop", problem: "This 'while' loop will run forever because the counter is never incremented. Add the increment.", question: `let i=0; while(i<5) { console.log(i); i{INPUT}; }`, answer: "++", tags: ['debug'], explanation: "Forgetting to update the variable in a loop's condition is a classic way to create an infinite loop." },
    { id: 171, level: 2, concept: "Variable Naming", problem: "Variable names cannot contain spaces. Correct the variable name.", question: `let {INPUT} = 'value';`, answer: "my_variable", tags: ['debug'], explanation: "Variable names cannot have spaces. Use camelCase or underscores instead." },
    { id: 172, level: 3, concept: "String Concatenation", problem: "The result is '55' not 10. The number needs to be added, not concatenated. Convert the string to a number first.", question: `const sum = {INPUT}('5') + 5;`, answer: "parseInt", tags: ['debug'], explanation: "The '+' operator concatenates strings. Use parseInt() or Number() to convert a string to a number before doing math." },
    { id: 173, level: 4, concept: "Array Indexing Bug", problem: "To get the second element ('b'), you need index 1, not 2. Correct the index.", question: `const letters = ['a', 'b']; const b = letters[{INPUT}];`, answer: "1", tags: ['debug'], explanation: "Arrays are zero-indexed, meaning the first element is at index 0, the second at 1, and so on." },
    { id: 174, level: 2, concept: "Syntax Error", problem: "A statement is missing its terminating semicolon. Add it.", question: `let x = 5{INPUT}`, answer: ";", tags: ['debug'], explanation: "While often optional due to automatic semicolon insertion, it's good practice to end statements with a semicolon." },
    { id: 175, level: 3, concept: "Case Sensitivity", problem: "The 'Math' object must be capitalized. Correct it.", question: `const pi = {INPUT}.PI;`, answer: "Math", tags: ['debug'], explanation: "JavaScript is case-sensitive. Built-in objects like 'Math' and 'Date' must be capitalized correctly." },
    { id: 176, level: 5, concept: "Undefined Property", problem: "The code tries to get a 'lenght' property, which is a typo. Correct the property name.", question: `const len = 'hello'.{INPUT};`, answer: "length", tags: ['debug'], explanation: "Trying to access a misspelled property will result in 'undefined'. This is a very common bug." },
    { id: 177, level: 3, concept: "Calling Functions", problem: "To call a function, you need to add parentheses after its name. Fix the call.", question: `function doThing() {} doThing{INPUT};`, answer: "()", tags: ['debug'], explanation: "Merely referencing a function name doesn't execute it. You must include parentheses () to invoke it." },
    { id: 178, level: 4, concept: "Logical Error", problem: "This should check if 'health' is 0, but it assigns 0 instead. Fix the operator.", question: `if (health {INPUT} 0) { status = 'Game Over'; }`, answer: "===", tags: ['debug'], explanation: "Using a single '=' (assignment) in a conditional instead of '==' or '===' (comparison) is a frequent logic error." },
    { id: 179, level: 2, concept: "Keyword Misuse", problem: "'constant' is not a keyword in JavaScript. Use the correct keyword for a non-reassignable variable.", question: `{INPUT} name = 'Link';`, answer: "const", tags: ['debug'], explanation: "Using words that seem like keywords but aren't will cause a syntax error. The correct keyword is 'const'." },
    { id: 180, level: 4, concept: "Off-by-one Error", problem: "To loop 5 times from 0, the condition should be 'i < 5', not '<= 5'. Correct it.", question: `for (let i = 0; i {INPUT} 5; i++) {}`, answer: "<", tags: ['debug'], explanation: "An off-by-one error in a loop's condition can make it run one too many or one too few times." },
    { id: 181, level: 3, concept: "Incorrect Quotes", problem: "The string is opened with a single quote but closed with a double quote, causing an error. Fix it.", question: `const msg = 'Hello{INPUT}';`, answer: "'", tags: ['debug'], explanation: "Strings must be enclosed with a matching pair of the same type of quote." },
    { id: 182, level: 5, concept: "Modifying String", problem: "Strings are immutable. You cannot change a character by index. What method should be used instead?", question: `let str = 'cat'; str = str.{INPUT}('c', 'b');`, answer: "replace", tags: ['debug'], explanation: "Strings cannot be changed directly. Methods like .replace() must be used to create a new, modified string." },
    { id: 183, level: 3, concept: "Missing Argument", problem: "The parseInt function requires the string to be converted as an argument. Provide it.", question: `const num = parseInt({INPUT});`, answer: "'123'", tags: ['debug'], explanation: "Forgetting to pass required arguments to a function is a common error." },
    { id: 184, level: 4, concept: "Boolean Logic Error", problem: "This should be true if 'a' OR 'b' is true. The operator is wrong.", question: `const canPass = a {INPUT} b;`, answer: "||", tags: ['debug'], explanation: "Using AND (&&) instead of OR (||) is a logic error that can lead to incorrect program behavior." },
    { id: 185, level: 2, concept: "Syntax Error", problem: "A 'const' variable must be initialized. Give it a value.", question: `const speed = {INPUT};`, answer: "100", tags: ['debug'], explanation: "Variables declared with 'const' must be assigned a value at the time of declaration." },
    { id: 186, level: 3, concept: "Function Definition", problem: "The 'function' keyword is missing from this function declaration. Add it.", question: `{INPUT} myFunction() {}`, answer: "function", tags: ['debug'], explanation: "Standard function declarations must begin with the 'function' keyword." },
    { id: 187, level: 4, concept: "Bracket Notation", problem: "When a property name is in a variable, you must use bracket notation. Fix this.", question: `const propName = 'power'; const value = hero[{INPUT}];`, answer: "propName", tags: ['debug'], explanation: "Dot notation works with literal property names, while bracket notation is needed for dynamic property access via variables." },
    { id: 188, level: 5, concept: "this keyword", problem: "In this arrow function, 'this' refers to the outer scope, not the object. What type of function should be used here?", question: `const obj = { run: {INPUT}() { console.log(this); } }`, answer: "function", tags: ['debug'], explanation: "Arrow functions don't have their own 'this' context, which can be a source of bugs in object methods. A regular function expression fixes this." },
    { id: 189, level: 3, concept: "Array Comma", problem: "Fix the array literal by adding the missing number 2 between the commas.", question: `const arr = [1, {INPUT}, 3];`, answer: "2", tags: ['debug'], explanation: "Consecutive commas in an array literal create empty slots, which can be a source of bugs. Ensure every element is defined." },
    { id: 190, level: 4, concept: "API Response", problem: "Convert the `jsonString` from an API into a JavaScript object.", question: `const jsonString = '{"power":100}'; const data = JSON.{INPUT}(jsonString);`, answer: "parse", tags: ['debug'], explanation: "`JSON.parse()` is used to convert a JSON formatted string into a JavaScript object so you can access its properties." },
    
    // --- Array Queen Puzzles ---
    { id: 7, level: 1, concept: "Array Creation", problem: "Create an array called 'minions' with the numbers 1, 2, and 3 inside.", question: `const minions = {INPUT};`, answer: "[1, 2, 3]", tags: ['array'], explanation: "Arrays are created with square brackets []. Elements inside are separated by commas." },
    { id: 16, level: 2, concept: "Array Indexing", problem: "Access the second element ('b') from the 'letters' array.", question: `const letters = ['a', 'b', 'c']; const letterB = letters[{INPUT}];`, answer: "1", tags: ['array'], explanation: "Array indexing starts at 0. So the first element is at index 0, the second at index 1, and so on." },
    { id: 17, level: 3, concept: "Array Length", problem: "Get the number of elements in the 'powerUps' array.", question: `const powerUps = ['shield', 'sword']; const count = powerUps.{INPUT};`, answer: "length", tags: ['array'], explanation: "The '.length' property of an array returns the number of elements it contains." },
    { id: 18, level: 4, concept: "Array Methods", problem: "Add the element 'newMinion' to the end of the 'army' array.", question: `army.{INPUT}('newMinion');`, answer: "push", tags: ['array'], explanation: "The '.push()' method adds one or more elements to the end of an array." },
    { id: 19, level: 4, concept: "Array Methods", problem: "Remove the last element from the 'spells' array.", question: `spells.{INPUT}();`, answer: "pop", tags: ['array'], explanation: "The '.pop()' method removes the last element from an array and returns that element." },
    { id: 38, level: 1, concept: "Array Declaration", problem: "What type of brackets are used to create an array literal?", question: `const arr = {INPUT}1, 2{INPUT};`, answer: "[]", tags: ['array'], explanation: "Square brackets `[]` are used to define an array." },
    { id: 39, level: 2, concept: "Accessing Elements", problem: "Get the value 'c' from the array `letters`.", question: `const letters = ['a', 'b', 'c']; const last = letters[{INPUT}];`, answer: "2", tags: ['array'], explanation: "Since array indexing starts at 0, the third element 'c' is at index 2." },
    { id: 40, level: 3, concept: "Changing Elements", problem: "Change the first element of the 'scores' array to be 100.", question: `let scores = [10, 20]; scores[0] = {INPUT};`, answer: "100", tags: ['array'], explanation: "You can change an element in an array by accessing it via its index and assigning a new value." },
    { id: 41, level: 4, concept: "Array Methods", problem: "Find the index of the element 'Zap' in the 'spells' array.", question: `const spells = ['Zap', 'Fire']; const idx = spells.indexOf('{INPUT}');`, answer: "Zap", tags: ['array'], explanation: "The .indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present." },
    { id: 42, level: 3, concept: "Array Length", problem: "Check if the `inventory` array is empty by checking its length.", question: `if (inventory.length === {INPUT}) { /* is empty */ }`, answer: "0", tags: ['array'], explanation: "An empty array has a length of 0. You can check this to see if an array has any elements." },
    { id: 43, level: 2, concept: "Data Types", problem: "An array can hold different data types. Complete this array to include a number.", question: `const mixed = ['text', {INPUT}];`, answer: "123", tags: ['array'], explanation: "Arrays in JavaScript are flexible and can store elements of any data type, like strings, numbers, and booleans, together." },
    { id: 44, level: 4, concept: "Array Methods", problem: "Use the 'join' method to create a string from the array, separated by dashes.", question: `const parts = ['A', 'B']; const str = parts.join('{INPUT}');`, answer: `"-"`, tags: ['array'], explanation: "The .join() method creates and returns a new string by concatenating all of the elements in an array, separated by a specified separator string." },
    { id: 66, level: 3, concept: "Array Includes", problem: "Check if the 'tools' array includes the item 'hammer'.", question: `const hasHammer = tools.{INPUT}('hammer');`, answer: `includes`, tags: ['array'], explanation: "The .includes() method determines whether an array includes a certain value among its entries, returning true or false." },
    { id: 67, level: 4, concept: "Array Slice", problem: "Create a new array containing the first two elements of 'potions'.", question: `const strongPotions = potions.{INPUT}(0, 2);`, answer: `slice`, tags: ['array'], explanation: "The .slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included)." },
    { id: 68, level: 5, concept: "Array Splice", problem: "Remove 'fire' from the 'elements' array at index 1.", question: `elements.{INPUT}(1, 1);`, answer: `splice`, tags: ['array'], explanation: "The .splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place." },
    { id: 69, level: 5, concept: "Array Map", problem: "Create a new array where each number in 'nums' is doubled.", question: `const doubled = nums.{INPUT}(n => n * 2);`, answer: `map`, tags: ['array'], explanation: "The .map() method creates a new array populated with the results of calling a provided function on every element in the calling array." },
    { id: 70, level: 5, concept: "Array Filter", problem: "Create a new array with only the numbers greater than 10.", question: `const large = nums.{INPUT}(n => n > 10);`, answer: `filter`, tags: ['array'], explanation: "The .filter() method creates a new array with all elements that pass the test implemented by the provided function." },
    { id: 131, level: 3, concept: "Array Method: unshift", problem: "Add the element 'start' to the beginning of the 'items' array.", question: `items.{INPUT}('start');`, answer: "unshift", tags: ['array'], explanation: "The .unshift() method adds one or more elements to the beginning of an array." },
    { id: 132, level: 3, concept: "Array Method: shift", problem: "Remove the first element from the 'queue' array.", question: `queue.{INPUT}();`, answer: "shift", tags: ['array'], explanation: "The .shift() method removes the first element from an array and returns that removed element." },
    { id: 133, level: 4, concept: "Array Destructuring", problem: "Use destructuring to get the first element from the 'coords' array.", question: `const [{INPUT}] = [10, 20];`, answer: "x", tags: ['array'], explanation: "Array destructuring allows you to unpack values from arrays into distinct variables." },
    { id: 134, level: 4, concept: "Spread Syntax", problem: "Use the spread syntax to combine two arrays into one.", question: `const combined = [{INPUT}arr1, ...arr2];`, answer: "...", tags: ['array'], explanation: "The spread (...) syntax can be used to expand an array's elements into another array." },
    { id: 135, level: 5, concept: "Array Method: forEach", problem: "Use the 'forEach' method to log each element in the 'names' array.", question: `names.{INPUT}(name => console.log(name));`, answer: "forEach", tags: ['array'], explanation: "The .forEach() method executes a provided function once for each array element." },
    { id: 136, level: 2, concept: "Array Elements", problem: "What punctuation is used to separate elements in an array?", question: `const arr = [1{INPUT} 2{INPUT} 3];`, answer: ",", tags: ['array'], explanation: "Commas are used to separate individual elements within an array." },
    { id: 137, level: 3, concept: "Array.isArray", problem: "Check if the 'data' variable is truly an array.", question: `Array.{INPUT}(data);`, answer: "isArray", tags: ['array'], explanation: "Array.isArray() is the most reliable way to check if a value is an array." },
    { id: 138, level: 4, concept: "Array Method: find", problem: "Find the first number in the array that is greater than 10.", question: `const found = numbers.{INPUT}(n => n > 10);`, answer: "find", tags: ['array'], explanation: "The .find() method returns the first element in an array that satisfies the provided testing function." },
    { id: 139, level: 5, concept: "Array Method: reduce", problem: "Use the 'reduce' method to get the sum of all numbers in an array.", question: `const sum = numbers.{INPUT}((acc, val) => acc + val, 0);`, answer: "reduce", tags: ['array'], explanation: "The .reduce() method executes a reducer function on each element of the array, resulting in a single output value." },
    { id: 140, level: 3, concept: "Nested Arrays", problem: "Access the number 4 in the nested array.", question: `const matrix = [[1, 2], [3, 4]]; const num = matrix[1][{INPUT}];`, answer: "1", tags: ['array'], explanation: "For nested arrays, use a second set of brackets to access elements in the inner array." },
    { id: 141, level: 4, concept: "Array Method: concat", problem: "Create a new array by merging 'listA' and 'listB'.", question: `const newList = listA.{INPUT}(listB);`, answer: "concat", tags: ['array'], explanation: "The .concat() method is used to merge two or more arrays, returning a new array." },
    { id: 142, level: 2, concept: "Empty Array", problem: "How do you define an empty array?", question: `const empty = [{INPUT}];`, answer: "", tags: ['array'], explanation: "An empty array is created with square brackets containing no elements." },
    { id: 143, level: 3, concept: "Array Index", problem: "What is the index of the last element in an array called 'items'?", question: `const lastIndex = items.length - {INPUT};`, answer: "1", tags: ['array'], explanation: "Since arrays are zero-indexed, the last element's index is always the length minus one." },
    { id: 144, level: 5, concept: "Array Method: findIndex", problem: "Find the index of the first element that is the string 'gem'.", question: `const index = items.{INPUT}(item => item === 'gem');`, answer: "findIndex", tags: ['array'], explanation: "The .findIndex() method returns the index of the first element in an array that satisfies the provided testing function." },
    { id: 145, level: 4, concept: "Shallow Copy", problem: "Create a copy of the `original` array using the spread syntax.", question: `const original = [1, 2]; const copy = [{INPUT}original];`, answer: "...", tags: ['array'], explanation: "The spread syntax `...` can be used to create a new array containing all the elements of an existing one." },
    { id: 146, level: 3, concept: "Array Method: reverse", problem: "Reverse the order of the elements in the 'letters' array in place.", question: `letters.{INPUT}();`, answer: "reverse", tags: ['array'], explanation: "The .reverse() method reverses an array in place. The first element becomes the last, and the last becomes the first." },
    { id: 147, level: 4, concept: "Array Method: sort", problem: "Sort the 'scores' array in ascending order.", question: `scores.sort((a, b) => a - {INPUT});`, answer: "b", tags: ['array'], explanation: "The .sort() method with a compare function (a, b) => a - b will sort numbers in ascending order." },
    { id: 148, level: 5, concept: "Array.from", problem: "Create an array from a string.", question: `const arr = Array.{INPUT}('abc');`, answer: "from", tags: ['array'], explanation: "Array.from() creates a new, shallow-copied Array instance from an array-like or iterable object." },
    { id: 149, level: 3, concept: "Modifying const arrays", problem: "Even though `items` is a `const`, you can still add an element to it. Use `.push()` to add the number 3.", question: `const items = [1, 2]; items.{INPUT}(3);`, answer: "push", tags: ['array'], explanation: "`const` prevents reassigning the variable, but it doesn't make the array's content immutable. Methods like `.push()` can still modify it." },
    { id: 150, level: 4, concept: "Array Method: some", problem: "Check if at least one number in the array is positive.", question: `const hasPositive = numbers.{INPUT}(n => n > 0);`, answer: "some", tags: ['array'], explanation: "The .some() method tests whether at least one element in the array passes the test implemented by the provided function." },
    { id: 151, level: 4, concept: "Array Method: every", problem: "Check if all numbers in the array are positive.", question: `const allPositive = numbers.{INPUT}(n => n > 0);`, answer: "every", tags: ['array'], explanation: "The .every() method tests whether all elements in the array pass the test implemented by the provided function." },
    { id: 152, level: 5, concept: "Array Method: flat", problem: "Flatten a nested array one level deep.", question: `const nested = [1, [2, 3]]; const flat = nested.{INPUT}();`, answer: "flat", tags: ['array'], explanation: "The .flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth." },
    { id: 153, level: 3, concept: "Accessing non-existent element", problem: "Access the third element of the array. (This will result in `undefined`.)", question: `const arr = [10, 20]; const third = arr[{INPUT}];`, answer: "2", tags: ['array'], explanation: "Accessing an index that is out of bounds (like index 2 in an array of length 2) will result in `undefined`." },
    { id: 154, level: 4, concept: "Destructuring with Rest", problem: "Use destructuring to get the first element and the rest of the array.", question: `const [first, ...{INPUT}] = [1,2,3,4];`, answer: "rest", tags: ['array'], explanation: "The rest (...) syntax can be used in destructuring to collect the remaining elements into a new array." },
    { id: 155, level: 2, concept: "Array of Strings", problem: "Create an array containing the strings 'rock', 'paper', 'scissors'.", question: `const choices = ["rock", "paper", {INPUT}];`, answer: "'scissors'", tags: ['array'], explanation: "Arrays can hold any data type, including strings. Remember to quote string values." },
    { id: 156, level: 4, concept: "Array Method: fill", problem: "Change all elements in an array to 0.", question: `myArray.{INPUT}(0);`, answer: "fill", tags: ['array'], explanation: "The .fill() method changes all elements in an array to a static value, from a start index to an end index." },
    { id: 157, level: 5, concept: "Array Method: reduce", problem: "Use the `reduce` method to calculate the product of all numbers in the array.", question: `[2, 3, 4].{INPUT}((acc, val) => acc * val, 1);`, answer: "reduce", tags: ['array'], explanation: "The `.reduce()` method can be used to 'boil down' an array to a single value, like a product or sum." },
    { id: 158, level: 3, concept: "String to Array", problem: "Split a sentence string into an array of words.", question: `const words = sentence.split({INPUT});`, answer: "' '", tags: ['array'], explanation: "The string method .split(' ') can be used to create an array of substrings based on a separator (a space in this case)." },
    { id: 159, level: 4, concept: "Array Method: at", problem: "Get the last element of an array using the .at() method.", question: `const last = myArray.at({INPUT});`, answer: "-1", tags: ['array'], explanation: "The .at() method takes an integer value and returns the item at that index, allowing for negative integers to access from the end." },
    { id: 160, level: 5, concept: "Array from Set", problem: "Convert a Set object into an Array.", question: `const mySet = new Set([1,2]); const arr = [...{INPUT}];`, answer: "mySet", tags: ['array'], explanation: "The spread syntax (...) can be used to convert any iterable, like a Set, into an array." },
];